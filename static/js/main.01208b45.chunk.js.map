{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","name","email","id","src","alt","CardList","cardArray","robots","map","robot","i","key","App","event","setState","searchfield","target","value","state","fetch","then","res","json","result","filteredFriends","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kSAmBeA,MAhBf,YAAoC,IAAhBC,EAAe,EAAfA,aACnB,OAEC,6BACE,2BACGC,UAAU,uCACZC,KAAK,OACLC,YAAY,2BAGZC,SAAUJ,MCEAK,MAZf,YAAkC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAOC,EAAK,EAALA,GAC3B,OACC,yBAAMP,UAAU,uDACf,yBAAKQ,IAAG,+BAA0BD,EAA1B,kBAA8CE,IAAI,UAC1D,6BACC,4BAAKJ,GACL,2BAAIC,MCcOI,MApBf,YAA6B,IAItBC,EAJqB,EAATC,OAIOC,KAAI,SAACC,EAAOC,GACpC,OAAO,kBAAC,EAAD,CACJC,IAAKF,EAAMP,GACXF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,MACbC,GAAIO,EAAMP,QAId,OACC,6BACEI,IC8BWM,E,kDAzCd,aAAe,IAAD,8BACb,gBAgBDlB,aAAe,SAACmB,GAEf,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAjBzC,EAAKC,MAAQ,CACZX,OAAQ,GACRQ,YAAa,IAJD,E,gEASO,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAM,OAAI,EAAKT,SAAS,CAACP,OAAQgB,S,+BAW/B,IAAD,OAGFC,EAAkBC,KAAKP,MAAMX,OAAOmB,QAAO,SAAAjB,GAChD,OAAOA,EAAMT,KAAK2B,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAGjE,OACC,yBAAKhC,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWD,aAAc+B,KAAK/B,eAC9B,kBAAC,EAAD,CAAUa,OAAQiB,S,GAnCJK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.01208b45.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nfunction SearchBox({searchChange}) {\r\n\treturn(\r\n\r\n\t\t<div>\r\n\t\t  <input \r\n\t\t  \t  className=' tc pa3 ba b--green bg-lightest-blue'\r\n\t\t\t  type=\"text\" \r\n\t\t\t  placeholder='search your robo friends'\r\n\t\t\t// when the input is change it will trigger an event on the \r\n\t\t\t//parent component called onSearchChange\r\n\t\t\t  onChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nfunction Card({name, email, id}) {\r\n\treturn(\r\n\t\t<div  className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\t\r\n\t\t\t<img src={`https://robohash.org/${id}/?size=200x200`} alt='robot'/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({robots}) {\r\n\t// we are looping thur each robot on filteredfriends\r\n\t// then we are returning a card for each robot in filteredfriends\r\n\t// assigning name,email,id to each card component it creates\r\n\tconst cardArray = robots.map((robot, i) => {\r\n\t\treturn <Card \r\n\t\t\t\t\tkey={robot.id} \r\n\t\t\t\t\tname={robot.name} \r\n\t\t\t\t\temail={robot.email} \r\n\t\t\t\t\tid={robot.id}\r\n\t\t\t\t />\r\n\t})\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{cardArray}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\n\tcomponentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(result => this.setState({robots: result}))\n\t}\n\n\t// we will pass this function to the input on searchbox component\n\t// this will be triggered when onchange happen on the input on searchbox component\n\tsearchChange = (event) => {\n\t\t// updating the searchfield state whenever this funtion execute\n\t\tthis.setState({searchfield: event.target.value})\n\t}\n\n\n\trender() {\n\t\t// we are filtering out robots based on the value of our searchfield state\n\t\t// so we can assign this filteredFriends to CardList component\n\t\tconst filteredFriends = this.state.robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t})\n\t\t\n\t\treturn(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1>Robofriends</h1>\n\t\t\t\t<SearchBox searchChange={this.searchChange}/>\n\t\t\t\t<CardList robots={filteredFriends}/>\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n// importing a package called tachyongs its \n//like a bootstrap with pre defined classes for styling out components\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}